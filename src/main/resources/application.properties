spring.application.name=Nest.dev
# Global Setting
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
## DB Setting ??
spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
### Token Setting
jwt.secret=${SECRET_KEY}
jwt.access-token-expiration=3600000
jwt.refresh-token-expiration=604800000
jwt.socket-token-expiration=30000
#### redis
spring.data.redis.host=${REDIS_HOST}
spring.data.redis.port=${REDIS_PORT}
#spring.data.redis.password=${REDIS_PASSWORD}
# Toss Payments ?? ??? ?? (true? ?? ?? ???)
toss.payments.enabled=true
# Toss Payments ??? Client Key (????/??? ??)
toss.payments.client-key=${TOSS_CLIENT_KEY}
# Toss Payments ??? Secret Key
toss.payments.client-secret=${TOSS_SECRET_KEY}
# ?? ???? ? ? ??(???? ??) ??? ??? ?? ????? ??
toss.payments.fail-on-unknown-properties=false
# Webhook(?? ??? ?? ??? ?? ??? ???? ??) ?? ??
toss.payments.webhook.enabled=true
# Webhook? ?? ?? ??? ????? ??
toss.payments.webhook.path=/toss/payments/webhook
# Webhook ?? ? ?? ?? ?? ?? ?? (true? ?? ??)
toss.payments.webhook.auth.enabled=true
# ??? ??? Webhook ????? ?? (?? ???/?? ??)
toss.payments.webhook.auth.path=/toss/payments/auth
##### OAuth2 KAKAO
spring.security.oauth2.client.registration.kakao.client-id=a0db929697af4261593128bcc9f53690
spring.security.oauth2.client.registration.kakao.redirect-uri=http://localhost:8080/oauth2/callback/kakao
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.kakao.scope=profile_nickname,account_email
spring.security.oauth2.client.registration.kakao.client-name=Kakao
spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post
spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.provider.kakao.user-name-attribute=id
###### OAuth2 NAVER
spring.security.oauth2.client.registration.naver.client-id=G_VLdk8JIULH98ZFvb_j
spring.security.oauth2.client.registration.naver.client-secret=${CLIENT_SECRET}
spring.security.oauth2.client.registration.naver.client-name=Naver
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.naver.redirect-uri=http://localhost:8080/oauth2/callback/naver
spring.security.oauth2.client.registration.naver.scope=email,nickname
spring.security.oauth2.client.registration.naver.provider=naver
spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.user-name-attribute=response
### JPA
spring.jpa.open-in-view=false

### Gmail SMTP ??
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${GMAIL}
spring.mail.password=${SMTP_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true # TLS ?? ?
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.trust=smtp.gmail.com
spring.mail.properties.mail.smtp.connectiontimeout=5000 # ?????? smtp ???? ??? ???? ? ???? ? ??
spring.mail.properties.mail.smtp.timeout=5000          # ?? ???? 5?
spring.mail.properties.mail.smtp.writetimeout=5000     # ?? ???? 5?
# ?? ?? ?? ?? ?? (???)
# ?: 5? (5 * 60 * 1000 = 300000)
auth.code.expiration-millis=300000

# AWS ?? ?? (IAM ??? ??? ?)
cloud.aws.credentials.access-key=${AWS_SES_ACCESS_KEY}
cloud.aws.credentials.secret-key=${AWS_SES_SECRET_KEY}

# AWS ?? (S3 ??? ??? ??)
cloud.aws.region.static=ap-northeast-2

# S3 ?? ?? (??? ???? ??)
cloud.aws.s3.bucket=nest-dev-image

cloud.aws.s3.base-path=certificate/
## SES
aws.ses.access-key=${AWS_SES_ACCESS_KEY}
aws.ses.secret-key=${AWS_SES_SECRET_KEY}
aws.ses.from-email=${AWS_SES_FROM_EMAIL}
aws.region=ap-northeast-2

management.endpoints.web.exposure.include=health,info,prometheus
management.endpoint.health.show-details=always
management.endpoint.prometheus.enabled=true
management.metrics.export.prometheus.enabled=true